{"meta":{"title":"uupeter的小站","subtitle":"uupeter的小站","description":"这里是uupeter的小站，欢迎光临！","author":"uupeter","url":"https://238728.github.io/hexoblog_gh","root":"/"},"pages":[{"title":"所有分类","date":"2023-11-26T08:36:17.373Z","updated":"2023-11-26T08:36:17.373Z","comments":true,"path":"categories/index.html","permalink":"https://238728.github.io/hexoblog_gh/categories/index.html","excerpt":"","text":""},{"title":"","date":"2023-10-24T14:14:08.930Z","updated":"2023-10-24T14:14:08.930Z","comments":true,"path":"css/title.css","permalink":"https://238728.github.io/hexoblog_gh/css/title.css","excerpt":"","text":"/* 文章页H1-H6图标样式效果 */ h1::before, h2::before, h3::before, h4::before, h5::before, h6::before { -webkit-animation: ccc 1.6s linear infinite ; animation: ccc 1.6s linear infinite ; } @-webkit-keyframes ccc { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg) } to { -webkit-transform: rotate(-1turn); transform: rotate(-1turn) } } @keyframes ccc { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg) } to { -webkit-transform: rotate(-1turn); transform: rotate(-1turn) } } /* 标题颜色 */ #content-inner.layout h1::before { color: #ef50a8 ; margin-left: -1.55rem; font-size: 1.3rem; margin-top: -0.23rem; } #content-inner.layout h2::before { color: #fb7061 ; margin-left: -1.35rem; font-size: 1.1rem; margin-top: -0.12rem; } #content-inner.layout h3::before { color: #ffbf00 ; margin-left: -1.22rem; font-size: 0.95rem; margin-top: -0.09rem; } #content-inner.layout h4::before { color: #a9e000 ; margin-left: -1.05rem; font-size: 0.8rem; margin-top: -0.09rem; } #content-inner.layout h5::before { color: #57c850 ; margin-left: -0.9rem; font-size: 0.7rem; margin-top: 0.0rem; } #content-inner.layout h6::before { color: #5ec1e0 ; margin-left: -0.9rem; font-size: 0.66rem; margin-top: 0.0rem; } /* 标题hover样式 */ #content-inner.layout h1:hover, #content-inner.layout h2:hover, #content-inner.layout h3:hover, #content-inner.layout h4:hover, #content-inner.layout h5:hover, #content-inner.layout h6:hover { color: #49b1f5 ; } #content-inner.layout h1:hover::before, #content-inner.layout h2:hover::before, #content-inner.layout h3:hover::before, #content-inner.layout h4:hover::before, #content-inner.layout h5:hover::before, #content-inner.layout h6:hover::before { color: #49b1f5 ; -webkit-animation: ccc 3.2s linear infinite ; animation: ccc 3.2s linear infinite ; }"},{"title":"OI专区","date":"2023-10-24T13:05:32.000Z","updated":"2023-10-24T13:06:25.180Z","comments":true,"path":"coding/index.html","permalink":"https://238728.github.io/hexoblog_gh/coding/index.html","excerpt":"","text":"ddd."},{"title":"并查集","date":"2023-11-25T10:32:57.353Z","updated":"2023-11-25T10:32:57.353Z","comments":true,"path":"coding/disj_set_union.html","permalink":"https://238728.github.io/hexoblog_gh/coding/disj_set_union.html","excerpt":"","text":"基础并查集【带路径压缩】 123456789101112131415161718192021222324252627void init()&#123; for(int i=1;i&lt;=n;i++) &#123; fa[i]=i; &#125;&#125;long long find(long long x)&#123; if(fa[x]==x) &#123; return x; &#125; else &#123; return fa[x]=find(fa[x]); &#125;&#125;void merge(long long x,long long y)&#123; x=find(x); y=find(y); if(x!=y) &#123; fa[x]=y; &#125;&#125; 基础并查集练习： 洛谷 P1551 亲戚"},{"title":"模板区","date":"2023-11-04T12:32:53.787Z","updated":"2023-11-04T12:32:53.787Z","comments":true,"path":"coding/templates.html","permalink":"https://238728.github.io/hexoblog_gh/coding/templates.html","excerpt":"","text":"常用模板 默认模板 1234567#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; return 0;&#125; 知识点 基础算法 二分 记住：要满足单调性。 在整数域上二分 12345678910111213141516long long l=,r=;while(l&lt;=r)&#123; long long mid=(l+r)&gt;&gt;1; if(check(mid)) &#123; ans=mid; l=mid+1; //r=mid-1; &#125; else &#123; r=mid-1; //l=mid+1; &#125;&#125; 在实数域上二分 1234567891011121314double l=,r=;for(int i=1;i&lt;=100;i++)&#123; double mid=(l+r)/2; if(check(mid)) &#123; r=mid; ans=mid; &#125; else &#123; l=mid; &#125;&#125; 二分练习： 字符串 图论 数据结构 并查集 基础并查集【带路径压缩】 123456789101112131415161718192021222324252627void init()&#123; for(int i=1;i&lt;=n;i++) &#123; fa[i]=i; &#125;&#125;long long find(long long x)&#123; if(fa[x]==x) &#123; return x; &#125; else &#123; return fa[x]=find(fa[x]); &#125;&#125;void merge(long long x,long long y)&#123; x=find(x); y=find(y); if(x!=y) &#123; fa[x]=y; &#125;&#125; 并查集练习： 数论 逆元 线性预处理逆元： 123456789void pre(long long mod)&#123; inv[0]=0; inv[1]=1; for(int i=2;i&lt;maxn;i++) &#123; inv[i]=(mod-mod/i)*inv[mod%i]%mod; &#125;&#125; 逆元求组合数 or 排列数： 预处理： 12345678910111213141516void pre()&#123; inv[0]=0; inv[1]=1; for(int i=2;i&lt;maxn;i++) &#123; inv[i]=(mod-mod/i)%mod*inv[mod%i]%mod; &#125; facinv[0]=1; fac[0]=1; for(int i=1;i&lt;maxn;i++) &#123; fac[i]=fac[i-1]%mod*i%mod; facinv[i]=facinv[i-1]%mod*inv[i]%mod; &#125;&#125; 组合数求法：Cmn=n!(n−m)!m!\\large C_{m}^{n}=\\frac{n!}{(n-m)!m!}Cmn​=(n−m)!m!n!​ 12345678long long C(long long n,long long m)&#123; if(m&lt;0||m&gt;n) &#123; return 0; &#125; return fac[n]%mod*facinv[n-m]%mod*facinv[m]%mod;&#125; 排列数求法：Amn=n!(n−m)!\\large A_{m}^{n}=\\frac{n!}{(n-m)!}Amn​=(n−m)!n!​ 12345678long long A(long long n,long long m)&#123; if(m&lt;0||m&gt;n) &#123; return 0; &#125; return fac[n]%mod*facinv[n-m]%mod;&#125; 逆元练习： 整除分块 模板 输出 n 除以所有正整数的商，以及每个商出现的个数，如果商为 0，则不用输出。 123456789101112#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; long long n; cin&gt;&gt;n; for(int l=1,r;l&lt;=n;l=r+1) &#123; r=n/(n/l); cout&lt;&lt;(n/l)&lt;&lt;&quot; &quot;&lt;&lt;r-l+1&lt;&lt;endl; &#125;&#125; 整除分块练习：洛谷 P2261 [CQOI2007] 余数求和 组合 斯特林数 公式： 斯特林数练习：iai 413 斯特林数 其他"},{"title":"关于","date":"2023-11-26T08:41:07.342Z","updated":"2023-11-26T08:41:07.342Z","comments":true,"path":"about/index.html","permalink":"https://238728.github.io/hexoblog_gh/about/index.html","excerpt":"","text":"1234567#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; cout&lt;&lt;&quot;Hello World!&quot;&lt;&lt;endl; return 0;&#125; 你好，世界！🗺️"},{"title":"","date":"2023-11-26T11:55:14.653Z","updated":"2023-11-25T10:44:29.373Z","comments":true,"path":"js/app.js","permalink":"https://238728.github.io/hexoblog_gh/js/app.js","excerpt":"","text":"document.addEventListener(\"DOMContentLoaded\", function () { volantis.requestAnimationFrame(() => { VolantisApp.init(); VolantisApp.subscribe(); VolantisFancyBox.init(); highlightKeyWords.startFromURL(); locationHash(); volantis.pjax.push(() => { VolantisApp.pjaxReload(); VolantisFancyBox.init(); sessionStorage.setItem(\"domTitle\", document.title); highlightKeyWords.startFromURL(); }, 'app.js'); volantis.pjax.send(() => { volantis.dom.switcher.removeClass('active'); // 关闭移动端激活的搜索框 volantis.dom.header.removeClass('z_search-open'); // 关闭移动端激活的搜索框 volantis.dom.wrapper.removeClass('sub'); // 跳转页面时关闭二级导航 volantis.EventListener.remove() // 移除事件监听器 see: layout/_partial/scripts/global.ejs }, 'app.js'); }); }); /* 锚点定位 */ const locationHash = () => { if (window.location.hash) { let locationID = decodeURI(window.location.hash.split('#')[1]).replace(/\\ /g, '-'); let target = document.getElementById(locationID); if (target) { setTimeout(() => { if (window.location.hash.startsWith('#fn')) { // hexo-reference https://github.com/volantis-x/hexo-theme-volantis/issues/647 volantis.scroll.to(target, { addTop: - volantis.dom.header.offsetHeight - 5, behavior: 'instant', observer: true }) } else { // 锚点中上半部有大片空白 高度大概是 volantis.dom.header.offsetHeight volantis.scroll.to(target, { addTop: 5, behavior: 'instant', observer: true }) } }, 1000) } } } Object.freeze(locationHash); /* Main */ const VolantisApp = (() => { const fn = {}, COPYHTML = 'COPY'; let scrollCorrection = 80; fn.init = () => { if (volantis.dom.header) { scrollCorrection = volantis.dom.header.clientHeight + 16; } window.onresize = () => { if (document.documentElement.clientWidth < 500) { volantis.isMobile = 1; } else { volantis.isMobile = 0; } if (volantis.isMobile != volantis.isMobileOld) { fn.setGlobalHeaderMenuEvent(); fn.setHeader(); fn.setHeaderSearch(); } } volantis.scroll.push(fn.scrollEventCallBack, \"scrollEventCallBack\") } fn.event = () => { volantis.dom.$(document.getElementById(\"scroll-down\"))?.on('click', function () { fn.scrolltoElement(volantis.dom.bodyAnchor); }); // 如果 sidebar 为空，隐藏 sidebar。 const sidebar = document.querySelector(\"#l_side\") if (sidebar) { const sectionList = sidebar.querySelectorAll(\"section\") if (!sectionList.length) { document.querySelector(\"#l_main\").classList.add(\"no_sidebar\") } } // 站点信息 最后活动日期 if (volantis.GLOBAL_CONFIG.sidebar.for_page.includes('webinfo') || volantis.GLOBAL_CONFIG.sidebar.for_post.includes('webinfo')) { const lastupd = volantis.GLOBAL_CONFIG.sidebar.webinfo.lastupd; if (!!document.getElementById('last-update-show') && lastupd.enable && lastupd.friendlyShow) { document.getElementById('last-update-show').innerHTML = fn.utilTimeAgo(volantis.GLOBAL_CONFIG.lastupdate); } } // 站点信息 运行时间 if (!!document.getElementById('webinfo-runtime-count')) { let BirthDay = new Date(volantis.GLOBAL_CONFIG.sidebar.webinfo.runtime.data); let timeold = (new Date().getTime() - BirthDay.getTime()); let daysold = Math.floor(timeold / (24 * 60 * 60 * 1000)); document.getElementById('webinfo-runtime-count').innerHTML = `${daysold} ${volantis.GLOBAL_CONFIG.sidebar.webinfo.runtime.unit}`; } // 消息提示 复制时弹出 document.body.oncopy = function () { fn.messageCopyright() }; } fn.restData = () => { scrollCorrection = volantis.dom.header ? volantis.dom.header.clientHeight + 16 : 80; } fn.setIsMobile = () => { if (document.documentElement.clientWidth < 500) { volantis.isMobile = 1; volantis.isMobileOld = 1; } else { volantis.isMobile = 0; volantis.isMobileOld = 0; } } // 校正页面定位（被导航栏挡住的区域） fn.scrolltoElement = (elem, correction = scrollCorrection) => { volantis.scroll.to(elem, { top: elem.offsetTop - correction }) } // 滚动事件回调们 fn.scrollEventCallBack = () => { // 【移动端 PC】////////////////////////////////////////////////////////////////////// // 显示/隐藏 Header导航 topBtn 【移动端 PC】 const showHeaderPoint = volantis.dom.bodyAnchor.offsetTop - scrollCorrection; const scrollTop = volantis.scroll.getScrollTop(); // 滚动条距离顶部的距离 // topBtn if (volantis.dom.topBtn) { if (scrollTop > volantis.dom.bodyAnchor.offsetTop) { volantis.dom.topBtn.addClass('show'); // 向上滚动高亮 topBtn if (volantis.scroll.del > 0) { volantis.dom.topBtn.removeClass('hl'); } else { volantis.dom.topBtn.addClass('hl'); } } else { volantis.dom.topBtn.removeClass('show').removeClass('hl'); } } // Header导航 if (volantis.dom.header) { if (scrollTop - showHeaderPoint > -1) { volantis.dom.header.addClass('show'); } else { volantis.dom.header.removeClass('show'); } } // 决定一二级导航栏的切换 【向上滚动切换为一级导航栏；向下滚动切换为二级导航栏】 【移动端 PC】 if (pdata.ispage && volantis.dom.wrapper) { if (volantis.scroll.del > 0 && scrollTop > 100) { // 向下滚动 volantis.dom.wrapper.addClass('sub'); // { // !!! 此处的Dom对象需要重载 !!! if (!pdata.ispage) return; // 填充二级导航文章标题 【移动端 PC】 volantis.dom.wrapper.find('.nav-sub .title').html(document.title.split(\" - \")[0]); // ====== bind events to every btn ========= // 评论按钮 【移动端 PC】 volantis.dom.comment = volantis.dom.$(document.getElementById(\"s-comment\")); // 评论按钮 桌面端 移动端 volantis.dom.commentTarget = volantis.dom.$(document.querySelector('#l_main article#comments')); // 评论区域 if (volantis.dom.commentTarget) { volantis.dom.comment.click(e => { // 评论按钮点击后 跳转到评论区域 e.preventDefault(); e.stopPropagation(); fn.scrolltoElement(volantis.dom.commentTarget); e.stopImmediatePropagation(); }); } else volantis.dom.comment.style.display = 'none'; // 关闭了评论，则隐藏评论按钮 // 移动端toc目录按钮 【移动端】 if (volantis.isMobile) { volantis.dom.toc = volantis.dom.$(document.getElementById(\"s-toc\")); // 目录按钮 仅移动端 volantis.dom.tocTarget = volantis.dom.$(document.querySelector('#l_side .toc-wrapper')); // 侧边栏的目录列表 if (volantis.dom.tocTarget) { // 点击移动端目录按钮 激活目录按钮 显示侧边栏的目录列表 volantis.dom.toc.click((e) => { e.stopPropagation(); volantis.dom.tocTarget.toggleClass('active'); volantis.dom.toc.toggleClass('active'); }); // 点击空白 隐藏 volantis.dom.$(document).click(function (e) { e.stopPropagation(); if (volantis.dom.tocTarget) { volantis.dom.tocTarget.removeClass('active'); } volantis.dom.toc.removeClass('active'); }); } else volantis.dom.toc.style.display = 'none'; // 隐藏toc目录按钮 } } // 设置导航栏菜单选中状态 【移动端 PC】 fn.setHeaderMenuSelection = () => { // !!! 此处的Dom对象需要重载 !!! volantis.dom.headerMenu = volantis.dom.$(document.querySelectorAll('#l_header .navigation,#l_cover .navigation,#l_side .navigation')); // 导航列表 // 先把已经激活的取消激活 volantis.dom.headerMenu.forEach(element => { let li = volantis.dom.$(element).find('li a.active') if (li) li.removeClass('active') let div = volantis.dom.$(element).find('div a.active') if (div) div.removeClass('active') }); // replace '%' '/' '.' var idname = location.pathname.replace(/\\/|%|\\./g, ''); if (idname.length == 0) { idname = 'home'; } var page = idname.match(/page\\d{0,}$/g); if (page) { page = page[0]; idname = idname.split(page)[0]; } var index = idname.match(/index.html/); if (index) { index = index[0]; idname = idname.split(index)[0]; } // 转义字符如 [, ], ~, #, @ idname = idname.replace(/(\\[|\\]|~|#|@)/g, '\\\\$1'); if (idname && volantis.dom.headerMenu) { volantis.dom.headerMenu.forEach(element => { // idname 不能为数字开头, 加一个 action- 前缀 let id = element.querySelector(\"[active-action=action-\" + idname + \"]\") if (id) { volantis.dom.$(id).addClass('active') } }); } } // 设置全局事件 fn.setGlobalHeaderMenuEvent = () => { if (volantis.isMobile) { // 【移动端】 关闭已经展开的子菜单 点击展开子菜单 document.querySelectorAll('#l_header .m-phone li').forEach(function (_e) { if (_e.querySelector(\".list-v\")) { // 点击菜单 volantis.dom.$(_e).click(function (e) { e.stopPropagation(); let menuType = '' // 关闭.menu-phone Array.from(e.currentTarget.children).some(val => { if(val.classList.contains('s-menu')) { menuType = 'menu' // 代表点击的是一级菜单外层的icon return } if(val.classList.contains('menuitem')) { menuType = 'item' // 点击的是下拉一级菜单 return } }) if(menuType === 'item') { // 关闭已经展开的子菜单, 这一步是针对点击多个拥有二级子菜单的一级菜单，关闭其他所有一级菜单的二级菜单 // ① e.currentTarget.parentElement.childNodes.forEach(function (e2) { if (Object.prototype.toString.call(e2) == '[object HTMLLIElement]') { e2.childNodes.forEach(function (e1) { if (Object.prototype.toString.call(e1) == '[object HTMLUListElement]') { volantis.dom.$(e1).hide() } }) } }) // 点击展开二级子菜单 /* 由于采用事件委托，因此此处点击， 两种情况，currentTarget指向菜单按钮a.s-menu和ul的共同父元素li， 第二，指向ul中的li元素，也就是子菜单 区分：情况一的第一个子元素a的类名是s-menu；情况二的子元素a的类名为menuitem 我们要点击外部的menu icon时要关闭的是.menu-phone而不是.menuitem */ let array = e.currentTarget.children for (let index = 0; index < array.length; index++) { const element = array[index]; if (volantis.dom.$(element).title === 'menu') { // 移动端菜单栏异常 volantis.dom.$(element).style.display = \"flex\" // https://github.com/volantis-x/hexo-theme-volantis/issues/706 } else { volantis.dom.$(element).show() } } } else { let menuPhone = document.querySelector('.switcher .menu-phone') let isHiding = window.getComputedStyle(menuPhone).display === 'none' if(isHiding) { volantis.dom.$(menuPhone).show() } else { volantis.dom.$(menuPhone).hide() // 别忘了再执行① // 准备关闭所有二级菜单, 注意此时的e和点击一级菜单时候的e层级不同 // 此处好像不能使用变量存储的menuPhone？要重新查询 document.querySelector('.switcher .menu-phone').childNodes.forEach(function (e2) { if (Object.prototype.toString.call(e2) == '[object HTMLLIElement]') { e2.childNodes.forEach(function (e1) { if (Object.prototype.toString.call(e1) == '[object HTMLUListElement]') { volantis.dom.$(e1).hide() } }) } }) } } }, 0); } }) } else { // 【PC端】 hover时展开子菜单，点击时[target.baseURI==origin时]隐藏子菜单? 现有逻辑大部分情况不隐藏子菜单 document.querySelectorAll('#wrapper .m-pc li > a[href]').forEach(function (e) { volantis.dom.$(e.parentElement).click(function (e) { e.stopPropagation(); if (e.target.origin == e.target.baseURI) { document.querySelectorAll('#wrapper .m-pc .list-v').forEach(function (e) { volantis.dom.$(e).hide(); // 大概率不会执行 }) } }, 0); }) } fn.setPageHeaderMenuEvent(); } // 【移动端】隐藏子菜单 fn.setPageHeaderMenuEvent = () => { if (!volantis.isMobile) return // 【移动端】 点击空白处隐藏子菜单 volantis.dom.$(document).click(function (e) { volantis.dom.mPhoneList.forEach(function (e) { volantis.dom.$(e).hide(); }) }); } // 设置导航栏搜索框 【移动端】 fn.setHeaderSearch = () => { if (!volantis.isMobile) return; if (!volantis.dom.switcher) return; // 点击移动端搜索按钮 volantis.dom.switcher.click(function (e) { e.stopPropagation(); volantis.dom.header.toggleClass('z_search-open'); // 激活移动端搜索框 volantis.dom.switcher.toggleClass('active'); // 移动端搜索按钮 }, false); // false : pjax 不移除监听 // 点击空白取消激活 volantis.dom.$(document).click(function (e) { volantis.dom.header.removeClass('z_search-open'); volantis.dom.switcher.removeClass('active'); }, false); // false : pjax 不移除监听 // 移动端点击搜索框 停止事件传播 volantis.dom.search.click(function (e) { e.stopPropagation(); }, false); // false : pjax 不移除监听 } // 设置 tabs 标签 【移动端 PC】 fn.setTabs = () => { let tabs = document.querySelectorAll('#l_main .tabs .nav-tabs') if (!tabs) return tabs.forEach(function (e) { e.querySelectorAll('a').forEach(function (e) { volantis.dom.$(e).on('click', (e) => { e.preventDefault(); e.stopPropagation(); const $tab = volantis.dom.$(e.target.parentElement.parentElement.parentElement); $tab.find('.nav-tabs .active').removeClass('active'); volantis.dom.$(e.target.parentElement).addClass('active'); $tab.find('.tab-content .active').removeClass('active'); $tab.find(e.target.className).addClass('active'); return false; }); }) }) } // hexo-reference 页脚跳转 https://github.com/volantis-x/hexo-theme-volantis/issues/647 fn.footnotes = () => { let ref = document.querySelectorAll('#l_main .footnote-backref, #l_main .footnote-ref > a'); ref.forEach(function (e, i) { ref[i].click = () => { }; // 强制清空原 click 事件 volantis.dom.$(e).on('click', (e) => { e.stopPropagation(); e.preventDefault(); let targetID = decodeURI(e.target.hash.split('#')[1]).replace(/\\ /g, '-'); let target = document.getElementById(targetID); if (target) { volantis.scroll.to(target, { addTop: - volantis.dom.header.offsetHeight - 5, behavior: 'instant' }) } }); }) } // 工具类：代码块复制 fn.utilCopyCode = (Selector) => { document.querySelectorAll(Selector).forEach(node => { const test = node.insertAdjacentHTML(\"beforebegin\", COPYHTML); const _BtnCopy = node.previousSibling; _BtnCopy.onclick = e => { e.stopPropagation(); const _icon = _BtnCopy.querySelector('i'); const _span = _BtnCopy.querySelector('span'); node.focus(); const range = new Range(); range.selectNodeContents(node); document.getSelection().removeAllRanges(); document.getSelection().addRange(range); const str = document.getSelection().toString(); fn.utilWriteClipText(str).then(() => { fn.messageCopyright(); _BtnCopy.classList.add('copied'); _icon.classList.remove('fa-copy'); _icon.classList.add('fa-check-circle'); _span.innerText = \"COPIED\"; setTimeout(() => { _icon.classList.remove('fa-check-circle'); _icon.classList.add('fa-copy'); _span.innerText = \"COPY\"; }, 2000) }).catch(e => { VolantisApp.message('系统提示', e, { icon: 'fa fa-exclamation-circle red' }); _BtnCopy.classList.add('copied-failed'); _icon.classList.remove('fa-copy'); _icon.classList.add('fa-exclamation-circle'); _span.innerText = \"COPY FAILED\"; setTimeout(() => { _icon.classList.remove('fa-exclamation-circle'); _icon.classList.add('fa-copy'); _span.innerText = \"COPY\"; }) }) } }); } // 工具类：复制字符串到剪切板 fn.utilWriteClipText = (str) => { return navigator.clipboard .writeText(str) .then(() => { return Promise.resolve() }) .catch(e => { const input = document.createElement('textarea'); input.setAttribute('readonly', 'readonly'); document.body.appendChild(input); input.innerHTML = str; input.select(); try { let result = document.execCommand('copy') document.body.removeChild(input); if (!result || result === 'unsuccessful') { return Promise.reject('复制文本失败!') } else { return Promise.resolve() } } catch (e) { document.body.removeChild(input); return Promise.reject( '当前浏览器不支持复制功能，请检查更新或更换其他浏览器操作!' ) } }) } // 工具类：返回时间间隔 fn.utilTimeAgo = (dateTimeStamp) => { const minute = 1e3 * 60, hour = minute * 60, day = hour * 24, week = day * 7, month = day * 30; const now = new Date().getTime(); const diffValue = now - dateTimeStamp; const minC = diffValue / minute, hourC = diffValue / hour, dayC = diffValue / day, weekC = diffValue / week, monthC = diffValue / month; if (diffValue < 0) { result = \"\" } else if (monthC >= 1 && monthC < 7) { result = \" \" + parseInt(monthC) + \" 月前\" } else if (weekC >= 1 && weekC < 4) { result = \" \" + parseInt(weekC) + \" 周前\" } else if (dayC >= 1 && dayC < 7) { result = \" \" + parseInt(dayC) + \" 天前\" } else if (hourC >= 1 && hourC < 24) { result = \" \" + parseInt(hourC) + \" 小时前\" } else if (minC >= 1 && minC < 60) { result = \" \" + parseInt(minC) + \" 分钟前\" } else if (diffValue >= 0 && diffValue { instance.hide({ transitionOut: transitionOut || 'fadeOut' }, toast, 'button'); if (success) success(instance, toast) }], ['否', (instance, toast) => { instance.hide({ transitionOut: transitionOut || 'fadeOut' }, toast, 'button'); if (cancel) cancel(instance, toast) }] ], onClosed: (instance, toast, closedBy) => { if (done) done(instance, toast, closedBy); } }); } } // 消息提示：隐藏 fn.hideMessage = (done = null) => { const toast = document.querySelector('.iziToast'); if (!toast) { if (done) done() return; } if (typeof iziToast === \"undefined\") { volantis.css(volantis.GLOBAL_CONFIG.plugins.message.css) volantis.js(volantis.GLOBAL_CONFIG.plugins.message.js, () => { hideMessage(done); }); } else { hideMessage(done); } function hideMessage(done) { iziToast.hide({}, toast); if (done) done(); } } // 消息提示：复制 let messageCopyrightShow = 0; fn.messageCopyright = () => { // 消息提示 复制时弹出 if (volantis.GLOBAL_CONFIG.plugins.message.enable && volantis.GLOBAL_CONFIG.plugins.message.copyright.enable && messageCopyrightShow < 1) { messageCopyrightShow++; VolantisApp.message(volantis.GLOBAL_CONFIG.plugins.message.copyright.title, volantis.GLOBAL_CONFIG.plugins.message.copyright.message, { icon: volantis.GLOBAL_CONFIG.plugins.message.copyright.icon, transitionIn: 'flipInX', transitionOut: 'flipOutX', displayMode: 1 }); } } return { init: () => { fn.init(); fn.event(); }, subscribe: () => { fn.setIsMobile(); fn.setHeader(); fn.setHeaderMenuSelection(); fn.setGlobalHeaderMenuEvent(); fn.setHeaderSearch(); fn.setScrollAnchor(); fn.setTabs(); fn.footnotes(); }, pjaxReload: () => { fn.event(); fn.restData(); fn.setHeader(); fn.setHeaderMenuSelection(); fn.setPageHeaderMenuEvent(); fn.setScrollAnchor(); fn.setTabs(); fn.footnotes(); // 移除小尾巴的移除 document.querySelector(\"#l_header .nav-main\").querySelectorAll('.list-v:not(.menu-phone)').forEach(function (e) { e.removeAttribute(\"style\") }) document.querySelector(\"#l_header .menu-phone.list-v\").removeAttribute(\"style\"); messageCopyrightShow = 0; }, utilCopyCode: fn.utilCopyCode, utilWriteClipText: fn.utilWriteClipText, utilTimeAgo: fn.utilTimeAgo, message: fn.message, question: fn.question, hideMessage: fn.hideMessage, messageCopyright: fn.messageCopyright, scrolltoElement: fn.scrolltoElement } })() Object.freeze(VolantisApp); /* FancyBox */ const VolantisFancyBox = (() => { const fn = {}; fn.loadFancyBox = (done) => { volantis.css(volantis.GLOBAL_CONFIG.plugins.fancybox.css); volantis.js(volantis.GLOBAL_CONFIG.plugins.fancybox.js).then(() => { if (done) done(); }) } /** * 加载及处理 * * @param {*} checkMain 是否只处理文章区域的文章 * @param {*} done FancyBox 加载完成后的动作，默认执行分组绑定 * @returns */ fn.init = (checkMain = true, done = fn.groupBind) => { if (!document.querySelector(\".md .gallery img, .fancybox\") && checkMain) return; if (typeof Fancybox === \"undefined\") { fn.loadFancyBox(done); } else { done(); } } /** * 图片元素预处理 * * @param {*} selectors 选择器 * @param {*} name 分组 */ fn.elementHandling = (selectors, name) => { const nodeList = document.querySelectorAll(selectors); nodeList.forEach($item => { if ($item.hasAttribute('fancybox')) return; $item.setAttribute('fancybox', ''); const $link = document.createElement('a'); $link.setAttribute('href', $item.src); $link.setAttribute('data-caption', $item.alt); $link.setAttribute('data-fancybox', name); $link.classList.add('fancybox'); $link.append($item.cloneNode()); $item.replaceWith($link); }) } /** * 原生绑定 * * @param {*} selectors 选择器 */ fn.bind = (selectors) => { fn.init(false, () => { Fancybox.bind(selectors, { groupAll: true, Hash: false, hideScrollbar: false, Thumbs: { autoStart: false, }, caption: function (fancybox, carousel, slide) { return slide.$trigger.alt || null } }); }); } /** * 分组绑定 * * @param {*} groupName 分组名称 */ fn.groupBind = (groupName = null) => { const group = new Set(); document.querySelectorAll(\".gallery\").forEach(ele => { if (ele.querySelector(\"img\")) { group.add(ele.getAttribute('data-group') || 'default'); } }) if (!!groupName) group.add(groupName); for (const iterator of group) { Fancybox.unbind('[data-fancybox=\"' + iterator + '\"]'); Fancybox.bind('[data-fancybox=\"' + iterator + '\"]', { Hash: false, hideScrollbar: false, Thumbs: { autoStart: false, } }); } } return { init: fn.init, bind: fn.bind, groupBind: (selectors, groupName = 'default') => { try { fn.elementHandling(selectors, groupName); fn.init(false, () => { fn.groupBind(groupName) }); } catch (error) { console.error(error) } } } })() Object.freeze(VolantisFancyBox); // highlightKeyWords 与 搜索功能搭配 https://github.com/next-theme/hexo-theme-next/blob/eb194a7258058302baf59f02d4b80b6655338b01/source/js/third-party/search/local-search.js // Question: 锚点稳定性未知 // ToDo: 查找模式 // 0. (/////////要知道浏览器自带全页面查找功能 CTRL + F) // 1. 右键开启查找模式 / 导航栏菜单开启?? / CTRL + F ??? // 2. 查找模式面板 (可拖动? or 固定?) // 3. keyword mark id 从 0 开始编号 查找下一处 highlightKeyWords.scrollToNextHighlightKeywordMark() 查找上一处 scrollToPrevHighlightKeywordMark() 循环查找(取模%) // 4. 可输入修改 查找关键词 keywords(type:list) // 5. 区分大小写 caseSensitive (/ 全字匹配?? / 正则匹配??) // 6. 在选定区域中查找 querySelector ?? // 7. 关闭查找模式 // 8. 搜索跳转 (URL 入口) 自动开启查找模式 调用 scrollToNextHighlightKeywordMark() const highlightKeyWords = (() => { let fn = {} fn.markNum = 0 fn.markNextId = -1 fn.startFromURL = () => { const params = decodeURI(new URL(location.href).searchParams.get('keyword')); const keywords = params ? params.split(' ') : []; const post = document.querySelector('#l_main'); if (keywords.length == 1 && keywords[0] == \"null\") { return; } fn.start(keywords, post); // 渲染耗时较长 fn.scrollToFirstHighlightKeywordMark() } fn.scrollToFirstHighlightKeywordMark = () => { volantis.cleanContentVisibility(); let target = fn.scrollToNextHighlightKeywordMark(\"0\"); if (!target) { volantis.requestAnimationFrame(fn.scrollToFirstHighlightKeywordMark) } } fn.scrollToNextHighlightKeywordMark = (id) => { // Next Id let input = id || (fn.markNextId + 1) % fn.markNum; fn.markNextId = parseInt(input) let target = document.getElementById(\"keyword-mark-\" + fn.markNextId); if (!target) { fn.markNextId = (fn.markNextId + 1) % fn.markNum; target = document.getElementById(\"keyword-mark-\" + fn.markNextId); } if (target) { volantis.scroll.to(target, { addTop: - volantis.dom.header.offsetHeight - 5, behavior: 'instant' }) } // Current target return target } fn.scrollToPrevHighlightKeywordMark = (id) => { // Prev Id let input = id || (fn.markNextId - 1 + fn.markNum) % fn.markNum; fn.markNextId = parseInt(input) let target = document.getElementById(\"keyword-mark-\" + fn.markNextId); if (!target) { fn.markNextId = (fn.markNextId - 1 + fn.markNum) % fn.markNum; target = document.getElementById(\"keyword-mark-\" + fn.markNextId); } if (target) { volantis.scroll.to(target, { addTop: - volantis.dom.header.offsetHeight - 5, behavior: 'instant' }) } // Current target return target } fn.start = (keywords, querySelector) => { fn.markNum = 0 if (!keywords.length || !querySelector || (keywords.length == 1 && keywords[0] == \"null\")) return; console.log(keywords); const walk = document.createTreeWalker(querySelector, NodeFilter.SHOW_TEXT, null); const allNodes = []; while (walk.nextNode()) { if (!walk.currentNode.parentNode.matches('button, select, textarea')) allNodes.push(walk.currentNode); } allNodes.forEach(node => { const [indexOfNode] = fn.getIndexByWord(keywords, node.nodeValue); if (!indexOfNode.length) return; const slice = fn.mergeIntoSlice(0, node.nodeValue.length, indexOfNode); fn.highlightText(node, slice, 'keyword'); fn.highlightStyle() }); } fn.getIndexByWord = (words, text, caseSensitive = false) => { const index = []; const included = new Set(); words.forEach(word => { const div = document.createElement('div'); div.innerText = word; word = div.innerHTML; const wordLen = word.length; if (wordLen === 0) return; let startPosition = 0; let position = -1; if (!caseSensitive) { text = text.toLowerCase(); word = word.toLowerCase(); } while ((position = text.indexOf(word, startPosition)) > -1) { index.push({ position, word }); included.add(word); startPosition = position + wordLen; } }); index.sort((left, right) => { if (left.position !== right.position) { return left.position - right.position; } return right.word.length - left.word.length; }); return [index, included]; }; fn.mergeIntoSlice = (start, end, index) => { let item = index[0]; let { position, word } = item; const hits = []; const count = new Set(); while (position + word.length position) { index.shift(); } else { break; } } } return { hits, start, end, count: count.size }; }; fn.highlightText = (node, slice, className) => { const val = node.nodeValue; let index = slice.start; const children = []; for (const { position, length } of slice.hits) { const text = document.createTextNode(val.substring(index, position)); index = position + length; let mark = document.createElement('mark'); mark.className = className; mark = fn.highlightStyle(mark) mark.appendChild(document.createTextNode(val.substr(position, length))); children.push(text, mark); } node.nodeValue = val.substring(index, slice.end); children.forEach(element => { node.parentNode.insertBefore(element, node); }); } fn.highlightStyle = (mark) => { if (!mark) return; mark.id = \"keyword-mark-\" + fn.markNum; fn.markNum++; mark.style.background = \"transparent\"; mark.style[\"border-bottom\"] = \"1px dashed #ff2a2a\"; mark.style[\"color\"] = \"#ff2a2a\"; mark.style[\"font-weight\"] = \"bold\"; return mark } fn.cleanHighlightStyle = () => { document.querySelectorAll(\".keyword\").forEach(mark => { mark.style.background = \"transparent\"; mark.style[\"border-bottom\"] = null; mark.style[\"color\"] = null; mark.style[\"font-weight\"] = null; }) } return { start: (keywords, querySelector) => { fn.start(keywords, querySelector) }, startFromURL: () => { fn.startFromURL() }, scrollToNextHighlightKeywordMark: (id) => { fn.scrollToNextHighlightKeywordMark(id) }, scrollToPrevHighlightKeywordMark: (id) => { fn.scrollToPrevHighlightKeywordMark(id) }, cleanHighlightStyle: () => { fn.cleanHighlightStyle() }, } })() Object.freeze(highlightKeyWords); /* DOM 控制 */ const DOMController = { /** * 控制元素显隐 */ visible: (ele, type = true) => { if (ele) ele.style.display = type === true ? 'block' : 'none'; }, /** * 移除元素 */ remove: (param) => { const node = document.querySelectorAll(param); node.forEach(ele => { ele.remove(); }) }, removeList: (list) => { list.forEach(param => { DOMController.remove(param) }) }, /** * 设置属性 */ setAttribute: (param, attrName, attrValue) => { const node = document.querySelectorAll(param); node.forEach(ele => { ele.setAttribute(attrName, attrValue) }) }, setAttributeList: (list) => { list.forEach(item => { DOMController.setAttribute(item[0], item[1], item[2]) }) }, /** * 设置样式 */ setStyle: (param, styleName, styleValue) => { const node = document.querySelectorAll(param); node.forEach(ele => { ele.style[styleName] = styleValue; }) }, setStyleList: (list) => { list.forEach(item => { DOMController.setStyle(item[0], item[1], item[2]) }) }, fadeIn: (e) => { if (!e) return; e.style.visibility = \"visible\"; e.style.opacity = 1; e.style.display = \"block\"; e.style.transition = \"all 0.5s linear\"; return e }, fadeOut: (e) => { if (!e) return; e.style.visibility = \"hidden\"; e.style.opacity = 0; e.style.display = \"none\"; e.style.transition = \"all 0.5s linear\"; return e }, fadeToggle: (e) => { if (!e) return; if (e.style.visibility == \"hidden\") { e = DOMController.fadeIn(e) } else { e = DOMController.fadeOut(e) } return e }, fadeToggleList: (list) => { list.forEach(param => { DOMController.fadeToggle(param) }) }, hasClass: (e, c) => { if (!e) return; return e.className.match(new RegExp('(\\\\s|^)' + c + '(\\\\s|$)')); }, addClass: (e, c) => { if (!e) return; e.classList.add(c); return e }, removeClass: (e, c) => { if (!e) return; e.classList.remove(c); return e }, toggleClass: (e, c) => { if (!e) return; if (DOMController.hasClass(e, c)) { DOMController.removeClass(e, c) } else { DOMController.addClass(e, c) } return e }, toggleClassList: (list) => { list.forEach(item => { DOMController.toggleClass(item[0], item[1]) }) } } Object.freeze(DOMController); const VolantisRequest = { timeoutFetch: (url, ms, requestInit) => { const controller = new AbortController() requestInit.signal?.addEventListener('abort', () => controller.abort()) let promise = fetch(url, { ...requestInit, signal: controller.signal }) if (ms > 0) { const timer = setTimeout(() => controller.abort(), ms) promise.finally(() => { clearTimeout(timer) }) } promise = promise.catch((err) => { throw ((err || {}).name === 'AbortError') ? new Error(`Fetch timeout: ${url}`) : err }) return promise }, Fetch: async (url, requestInit, timeout = 15000) => { const resp = await VolantisRequest.timeoutFetch(url, timeout, requestInit); if (!resp.ok) throw new Error(`Fetch error: ${url} | ${resp.status}`); let json = await resp.json() if (!json.success) throw json return json }, POST: async (url, data) => { const requestInit = { method: 'POST', } if (data) { const formData = new FormData(); Object.keys(data).forEach(key => formData.append(key, String(data[key]))) requestInit.body = formData; } const json = await VolantisRequest.Fetch(url, requestInit) return json.data; }, Get: async (url, data) => { const json = await VolantisRequest.Fetch(url + (data ? (`?${new URLSearchParams(data)}`) : ''), { method: 'GET' }) } } Object.freeze(VolantisRequest);"},{"title":"","date":"2023-11-05T09:48:35.071Z","updated":"2023-11-05T09:48:35.071Z","comments":true,"path":"tools/editormd.html","permalink":"https://238728.github.io/hexoblog_gh/tools/editormd.html","excerpt":"","text":"### 关于 Editor.md Editor.md 是一款开源的、可嵌入的 Markdown 在线编辑器（组件），基于 CodeMirror、jQuery 和 Marked 构建。 $(function() { var editor = editormd(\"test-editor\", { // width : \"100%\", // height : \"100%\", path : \"editormd/lib/\" }); });"},{"title":"所有标签","date":"2023-11-26T08:40:20.210Z","updated":"2023-11-26T08:40:20.210Z","comments":true,"path":"tags/index.html","permalink":"https://238728.github.io/hexoblog_gh/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world - 副本 - 副本","date":"2023-11-26T02:16:59.000Z","updated":"2023-11-26T03:14:59.799Z","comments":true,"path":"2023/11/26/hello-world - 副本 - 副本/","link":"","permalink":"https://238728.github.io/hexoblog_gh/2023/11/26/hello-world%20-%20%E5%89%AF%E6%9C%AC%20-%20%E5%89%AF%E6%9C%AC/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"hi","slug":"hi","permalink":"https://238728.github.io/hexoblog_gh/tags/hi/"},{"name":"ss","slug":"ss","permalink":"https://238728.github.io/hexoblog_gh/tags/ss/"},{"name":"skdj","slug":"skdj","permalink":"https://238728.github.io/hexoblog_gh/tags/skdj/"},{"name":"skjd","slug":"skjd","permalink":"https://238728.github.io/hexoblog_gh/tags/skjd/"},{"name":"你好","slug":"你好","permalink":"https://238728.github.io/hexoblog_gh/tags/%E4%BD%A0%E5%A5%BD/"}]},{"title":"Hello World","slug":"hello-world - 副本","date":"2023-11-26T02:16:59.000Z","updated":"2023-11-26T02:23:00.593Z","comments":true,"path":"2023/11/26/hello-world - 副本/","link":"","permalink":"https://238728.github.io/hexoblog_gh/2023/11/26/hello-world%20-%20%E5%89%AF%E6%9C%AC/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Latex 测试","slug":"latex-test","date":"2023-10-22T05:52:18.618Z","updated":"2023-10-22T06:05:12.234Z","comments":true,"path":"2023/10/22/latex-test/","link":"","permalink":"https://238728.github.io/hexoblog_gh/2023/10/22/latex-test/","excerpt":"","text":"O(n)→2×1062×107O(n) \\rightarrow 2 \\times 10^6 2 \\times 10^7O(n)→2×1062×107 O(nlogn)→2×105O(nlogn) \\rightarrow 2 \\times 10^5O(nlogn)→2×105","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2023-10-20T10:59:38.840Z","updated":"2023-11-26T12:08:14.129Z","comments":true,"path":"2023/10/20/hello-world/","link":"","permalink":"https://238728.github.io/hexoblog_gh/2023/10/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"hi","slug":"hi","permalink":"https://238728.github.io/hexoblog_gh/tags/hi/"},{"name":"ss","slug":"ss","permalink":"https://238728.github.io/hexoblog_gh/tags/ss/"},{"name":"skdj","slug":"skdj","permalink":"https://238728.github.io/hexoblog_gh/tags/skdj/"},{"name":"skjd","slug":"skjd","permalink":"https://238728.github.io/hexoblog_gh/tags/skjd/"},{"name":"你好","slug":"你好","permalink":"https://238728.github.io/hexoblog_gh/tags/%E4%BD%A0%E5%A5%BD/"}]}